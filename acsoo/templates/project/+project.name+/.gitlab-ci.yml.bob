stages:
  - test
  - clean

before_script:
  # install acsoo
  - virtualenv venv-acsoo
  - venv-acsoo/bin/pip install acsoo
  - ln -s venv-acsoo/bin/acsoo

variables:
  DB_NAME: "${CI_PROJECT_NAME}-${CI_PIPELINE_ID}"

pylint:
  stage: test
  tags:
    - python
  script:
    - ./acsoo pylint

flake8:
  stage: test
  tags:
    - python
  script:
    - ./acsoo flake8

{{% if odoo.series in ['8.0', '9.0'] %}}
{{% set odoocmd = 'odoo-server-autodiscover' %}}
{{% else %}}
{{% set odoocmd = 'odoo' %}}
{{% endif %}}
test:
  stage: test
  tags:
    - odoo-{{{ odoo.series }}}
  script:
    - virtualenv venv
    - venv/bin/pip install coverage
    - venv/bin/pip install -r requirements.txt -e .
    - createdb ${DB_NAME}
    - ADDONS_INIT=$(./acsoo addons list-depends)
    - echo Installing ${ADDONS_INIT}
    - unbuffer venv/bin/{{{ odoocmd }}} -c odoo-ci.cfg -d ${DB_NAME} --stop-after-init -i ${ADDONS_INIT} | ./acsoo checklog
    # do not test server_environment_files because server_environment depends on it,
    # so testing server_environment_files implies testing server_environment,
    # and the server_environment tests require a very specific server_environment_files
    - ADDONS_TEST=$(./acsoo addons list --exclude server_environment_files list)
    - echo Testing ${ADDONS_TEST}
    - unbuffer venv/bin/coverage run venv/bin/{{{ odoocmd }}} -c odoo-ci.cfg -d ${DB_NAME} --stop-after-init -i ${ADDONS_TEST} --test-enable | ./acsoo checklog
    - venv/bin/coverage report
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+\%)/'

dropdb:
  stage: clean
  tags:
    - odoo-{{{ odoo.series }}}
  script:
    # this may run on another runner, in which case it will do nothing
    - dropdb --if-exists ${DB_NAME}
  when: always
